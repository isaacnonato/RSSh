#!/bin/bash

max_item_count=10
xml_executable="xml"

function get_exit_code {
  type $1 >/dev/null 2>&1
  local return_=$?
  return $return_
}

function check_for_xmlstarlet {
  local return_=1
  if get_exit_code xmlstarlet || get_exit_code xml; then
    local return_=0
  fi
  return $return_
}

if get_exit_code xmlstarlet; then 
  xml_executable="xmlstarlet"
fi

if ! check_for_xmlstarlet; then 
  echo "XMLStarlet not installed."
  exit 1
fi
  
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
config_folder="${XDG_CONFIG_HOME}/rssh"

# Serialize items to be served 
# $1 - Channel title 
# $2 - Item link
# $3 - item title 
serialize() {
  echo -e "[$1] \e]8;;$2\e\\$3\e]8;;\e\\"
}

parse_xml() {
  title="$($xml_executable sel -t -v "//rss/channel/title" <<< "$1")"
  item_count=$($xml_executable sel -t -c "count(//rss/channel/item)" <<< "$1")
  if (( $item_count > $max_item_count )); then 
    item_count=$max_item_count
  fi
  for (( i=1; i<=$item_count; i++ ))
  do
    item_title="$($xml_executable sel -t -v "//rss/channel/item[$i]/title" <<< "$1")"
    item_link="$($xml_executable sel -t -v "//rss/channel/item[$i]/link" <<< "$1")"
    serialize "$title"  "$item_link" "$item_title"
  done
}

read_and_serve_feed_file() {
  title=$(sed -n 1p $1)
  printf "### $title\n"
  declare -a entries=($(tail -n 2 $1))
  for entry in "${entries[@]}" 
  do 
     parse_xml "$(curl --silent $entry)"
  done
  printf '\n'
}

check_feed_files() {
  if [[ ! -d $config_folder ]]; then 
    # No config folder, create it.
    mkdir -p ${config_folder}
    touch ${config_folder}/default.feed
    sed -i "1i# This is your default feed." ${config_folder}/default.feed 
  fi
  cd $config_folder
}

read_config_folder() {
  check_feed_files
  declare -a files=($(ls $config_folder))
  for file in "${files[@]}"
  do
    read_and_serve_feed_file $file
  done
}
read_config_folder
